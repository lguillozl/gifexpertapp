{"version":3,"sources":["AddCategory.js","GifGridItem.js","helpers/getGifs.js","GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAmCeA,EAhCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAAAC,GACjBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAAAP,GACtBF,EAAcE,EAAEQ,OAAOF,a,QCIhBG,EAVK,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAEzB,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCSDK,EAhBF,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACNN,EADM,iDAC0CO,UAAUF,GADpD,+DAEOG,MAAMR,GAFb,cAENS,EAFM,gBAGSA,EAAKC,OAHd,uBAGLC,EAHK,EAGLA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAM,CACFC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QAT9B,kBAaLY,GAbK,4CAAH,sDC8BEM,EA1BC,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAEd,ECHwB,SAAEA,GAE1B,MAA0BpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAW,WAEPlB,EAASC,GACJkB,MAAM,SAAAC,GACHH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAGtB,CAACd,IAEGe,EDfwBK,CAAcpB,GAAjCW,EAAZ,EAAOL,KAAaQ,EAApB,EAAoBA,QAEpB,OACI,qCACA,oBAAIlB,UAAU,oCAAd,SAAmDI,IAElDc,GAAW,mBAAGlB,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,YAAf,SAEQe,EAAOH,KAAI,SAACC,GACR,OACI,cAAC,EAAD,eAEQA,GADGA,EAAIC,aESxBW,EAvBM,WAEjB,MAAoCzC,mBAAS,CAAC,qBAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OACI,qCACI,gDACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEQS,EAAWoB,KAAI,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCXjCsB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.9d215610.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = e => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2){\n            setCategories(categories => [inputValue, ...categories])\n            setInputValue('')\n        }\n    }\n\n    return(\n        <form onSubmit={handleSubmit}>\n            <input\n                type='text'\n                value={inputValue}\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;","import React from 'react'; \n\nconst GifGridItem = ({title, url}) => {\n\n    return(\n        <div className='card animate__animated animate__bounce'>\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n\nexport default GifGridItem;","const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=PP502HX9L6OFSoCXBoPoZMtQhSFP1e9p`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map(img => {\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}\n\nexport default getGifs","import React from 'react';\nimport GifGridItem from './GifGridItem';\nimport { useFetchGifs } from './hooks/useFetchGifs';\n\nconst GifGrid = ({category}) => {\n\n    const {data:images, loading} = useFetchGifs( category );\n\n    return(\n        <>\n        <h3 className=\"animate__animated animate__bounce\">{category}</h3>\n\n        {loading && <p className='animate__animated animate__flash'>Loading...</p>}\n        <div className='card-grid'>   \n            {\n                images.map((img) => {\n                    return (\n                        <GifGridItem \n                            key = {img.id}\n                            {...img} \n                        />\n                    )\n                })\n            }\n        </div>\n        </>\n        \n    )\n}\n\nexport default GifGrid","import { useState, useEffect } from \"react\";\nimport getGifs from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true,\n    });\n\n    useEffect( () => {\n\n        getGifs( category )\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false,\n                })\n            })\n    }, [category])\n\n    return state; // {data: [], loading: true,}\n}","import React, { useState } from 'react';\nimport AddCategory from './AddCategory';\nimport GifGrid from './GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['My Hero Academia']);\n\n    return(\n        <>\n            <h2>Gif Expert App</h2>\n            <hr/>\n            <AddCategory setCategories={setCategories}/>\n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid \n                            key={category}\n                            category={category} \n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp'\n\nimport './index.css'\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}